-- ============================================================================
-- SCRIPT: 24-add-promocao-validation.sql
-- Descri√ß√£o: Adiciona valida√ß√£o backend de promo√ß√µes
-- Data: 2025-01-18
-- Vers√£o: 1.0
-- ============================================================================

BEGIN;

-- Fun√ß√£o para validar se pedido tem produtos em promo√ß√£o
CREATE OR REPLACE FUNCTION pedido_tem_promocao(p_pedido_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
    tem_promocao BOOLEAN;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM pedido_itens pi
        INNER JOIN produtos p ON p.id = pi.produto_id
        WHERE pi.pedido_id = p_pedido_id
        AND p.promocao = true
        AND p.ativo = true
    ) INTO tem_promocao;
    
    RETURN tem_promocao;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION pedido_tem_promocao(UUID) IS 
'Verifica se um pedido cont√©m produtos em promo√ß√£o';

-- Fun√ß√£o para validar regras de promo√ß√£o
CREATE OR REPLACE FUNCTION validar_promocao_pedido(
    p_pedido_id UUID,
    p_tipo_entrega VARCHAR
)
RETURNS TABLE (
    valido BOOLEAN,
    mensagem TEXT
) AS $$
DECLARE
    tem_promocao BOOLEAN;
BEGIN
    -- Verificar se pedido tem produtos em promo√ß√£o
    tem_promocao := pedido_tem_promocao(p_pedido_id);
    
    -- Regra: Promo√ß√µes apenas para retirada no balc√£o
    IF tem_promocao AND p_tipo_entrega = 'delivery' THEN
        RETURN QUERY SELECT 
            false as valido,
            'Produtos em promo√ß√£o dispon√≠veis apenas para retirada no balc√£o' as mensagem;
        RETURN;
    END IF;
    
    -- Valida√ß√£o passou
    RETURN QUERY SELECT 
        true as valido,
        'Pedido v√°lido' as mensagem;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION validar_promocao_pedido(UUID, VARCHAR) IS 
'Valida regras de promo√ß√£o para um pedido (ex: apenas balc√£o)';

-- Trigger para validar promo√ß√µes antes de inserir/atualizar pedido
CREATE OR REPLACE FUNCTION trigger_validar_promocao()
RETURNS TRIGGER AS $$
DECLARE
    validacao RECORD;
BEGIN
    -- Validar apenas se pedido est√° sendo criado ou tipo_entrega mudou
    IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND OLD.tipo_entrega IS DISTINCT FROM NEW.tipo_entrega) THEN
        -- Executar valida√ß√£o
        SELECT * INTO validacao
        FROM validar_promocao_pedido(NEW.id, NEW.tipo_entrega)
        LIMIT 1;
        
        -- Se n√£o for v√°lido, bloquear opera√ß√£o
        IF NOT validacao.valido THEN
            RAISE EXCEPTION '%', validacao.mensagem;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar trigger (comentado por padr√£o para n√£o quebrar fluxo existente)
-- Descomente ap√≥s testar em ambiente de desenvolvimento
/*
DROP TRIGGER IF EXISTS trigger_validar_promocao_pedido ON pedidos;

CREATE TRIGGER trigger_validar_promocao_pedido
BEFORE INSERT OR UPDATE ON pedidos
FOR EACH ROW
EXECUTE FUNCTION trigger_validar_promocao();
*/

COMMIT;

SELECT '‚úÖ Fun√ß√µes de valida√ß√£o de promo√ß√£o criadas' as status;
SELECT 'Trigger comentado - descomente ap√≥s testes' as aviso;

-- Exemplo de uso
SELECT 'üìù EXEMPLO DE USO:' as info;
SELECT 
    pedido_tem_promocao(id) as tem_promocao,
    tipo_entrega,
    numero_pedido
FROM pedidos
LIMIT 5;
